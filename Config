#!/usr/bin/perl
#
#        DirectIRCd Development Team
#   (c) 2012 DirectIRCD
#   (c) 2008 Omega Development Team
#
# Ported From OmegaIRC Securiy Services
#
# Description:
#	 ./configuration wrapper 
#	 Originally designed  to allow easy use of ./configuration options
# 	 in an inviornment that is inuitive and user friendly.
#
#   $Id: Config 2128 2011-04-26 03:19:17Z twitch $


use Switch;

############################################
#              Global Variables
#
# Altho i hate global variables this makes
# the program easier to read and maintain
# esp since it writes out cache file.
############################################

my $VERSION = '$Id: Config 2128 2011-04-26 03:19:17Z twitch $';
my $CACHEFILE = "config.values";
my $INVALID = 1;

my $MISC;
my $EMODES;
my $HOST;
my $DIR;
my $IODEBUG;
my $PROFILE;
my $DMODE;
my $RMAKE;
my $CONFIG;
my $ZLIB;
my $SSL;
my $CONFIG_DATE; 
my $CONFIG_VERSION = "0.6";
my $CONFIG_CHECK = 0;
my $SMALLNET;

#init our defaults

sub config_def {
  if ($CONFIG_CHECK != 0) { return; }
    $MISC = "";
    $HOST = `hostname`;
    $DMODE="No"; $PROFILE = "No";
    $MISC = "None";   $DIR = $ENV{'HOME'}."/directircd/";
    $IODEBUG = "No"; $RMAKE = "Yes"; $SSL = "No"; 
    $CONFIG_DATE = "Unknown"; $ZLIB = "Yes";
    $SSLDIR = ""; $EMODES = "Yes"; $SMALLNET = "No";
    $PROFILE = "No";
    chomp($HOST);
}

sub check_cache {
	$tmp = `ls -l * | grep -c 'config.value'`;
	config_def ();  #init defaults 
    if ($tmp > 0) { $CONFIG_CHECK = 1; }

}

sub load_cache {

    my $inc = 0;

    if ($CONFIG_CHECK > 0) {
        open (CACHE,$CACHEFILE);

        $inc = 0;

        #check for valid config should always start with
        #a pound which is comments in our chache file
        $_ = (<CACHE>);
        chomp($_);

        if (($_  !~ /(#.+|\#)/) && ($inc == 0)) {
                print "Error: Invalid cache file format... loading defaults.\n";
                $invalid = 1;
        }
        else {
                while (<CACHE>) {

                        chomp;
                        if ($_  !~ /(#.+|\#)/) {

                            switch ($inc) {
                                    case 0 {
					    $INVALID = 0; 
					    #check the version of the config
					    if ($_ != $CONFIG_VERSION) {
						    print "Error: Invalid cache file version... loading defaults.\n";
						    $INVALID = 1;
					    }
				    }
                                  case 1 { $CONFIG_DATE = $_; print "Cache file generated on: ".$_; }
				  case 2 { $DIR = $_;  }
				  case 3 {
					   if ($_ =~ /(Yes|No|yes|no|y|n)/) { $OSTATS = $_; }
					  else { $EMODES = "Yes"; }
				  }
				  case 4 { 
					  if ($_ =~ /(Yes|No|yes|no|y|n)/) { $IODEBUG = $_; }
					  else { $IODEBUG = "No"; }
				  }
				  case 5 {
					  $HOST = $_;
				  }
				  case 6 { 
					  if ($_ =~ /(Yes|No|yes|no|y|n)/) { $DMODE = $_; }
					  else { $DMODE = "No"; }
				  }
				  case 7 {
					  if ($_ =~ /(Yes|No|yes|no|y|n)/) { $PROFILE = $_; }
					  else { $PROFILE = "No"; } 
				  }
				  case 8 {
					  if (lc($_) =~ /(yes|no|y|n)/) { $ZLIB = $_; }
					  else { $ZLIB = "Yes"; } 
				  }
				  case 9 {
					if ($_ !~ /--.+/) { $MISC = "None";  }
					else { $MISC = $_; }
				  }
				  case 10 {
					  if ($_ =~ /(Yes|No|yes|no|y|n)/) { $RMAKE = $_; }
					  else { $RMAKE = "Yes"; }
				  }
				  case 11 {
					  $CONFIG = $_;
				  }	
				  case 12 { 
						  if ($_ =~ /(Yes|No|yes|no|y|n)/) { $SVN = $_; }
						  else { $SVN = "Yes"; }
				  }
				  case 13 { 
						  if ($_ =~ /(Yes|No|yes|no|y|n)/) { $SSL = $_; }
						  else { $SSL = "Yes"; }
				  }
				  case 14 { $SSLDIR = $_;  }
				  case 15 { $SMALLNET = $_; } 
				  case 16 { close(CHACHE); }
									
                            }
                            $inc++; #increas the number of valid lines read.
                        }
                    }
            }
        print "\r\n";
    }

	#So if our config cache is invalid force defaults to be loaded
	#because we cant guarantee the information from that point on.
	if ($INVALID != 0) {
          $CONFIG_CHECK = 0;
		  config_def();
	}
}

sub write_cache {
	system("rm -rf ".$CACHEFILE);
	open(FILEWRITE, "> ".$CACHEFILE);
	#double check the values before writing them.
    if ((!$IODEBUG) || ($IODEBUG eq '#')) { $IODEBUG= "No"; }
    if (!$EMODES) { $EMODES = "Yes"; }
    if (!$SSL) { $SSL = "No"; $SSLDIR = $DIR; }
    if (!$HOST) { $HOST = `hostname`; }
    if (!$DMODE) { $DMODE = "No"; }
	if (!$PROFILE) { $PROFILE = "No"; }
	if ((!$MISC) || ($i !~ /--.+/)) { $MISC = "None";  }
	#if ((!$DIR) || ($DIR !~ /\/.+/)) { $DIR = $ENV{'HOME'}."/omega/"; }
    if (!$PTHREAD) { $PTHREAD = "Yes";  }
	if (!$RMAKE) { $RMAKE = "Yes"; }
	if (!$SMALLNET) { $MSGBUFSIZE = "No"; }

my ($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst) = localtime(time);


if ($hour < 10) {
    $hour = "0".$hour;
}
if ($min < 10) {
    $min = "0".$min;
}
#some hackery to make this work properly... :/
if (($year > 100) && ($year < 150)) {
    $year = ($year - 100) + 2000;
}
$today = $mon."/".$mday."/".$year." ".$hour.":".$min;

print FILEWRITE << "EOF";
#  DirectIRCd Configuration Cache
#  (C) 2012 DirectIRCd
#  (C) 2010-2011 Omega Team
#
#Generated by Config
#Config Version: $VERSION
#File Version: $CONFIG_VERSION
#
#Do not edit any of the below information
#that could result in invalid paramaters
#being passed to the build system.
$CONFIG_VERSION
#Date we were generated
$today
#Dir value
$DIR
#Extended Modes enabled
$EMODES
#IO Debugging enabled?
$IODEBUG
#Host Value
$HOST
#Debug enabled?
$DMODE
#Profiling
$PROFILE
#ZLIB Support
$ZLIB
#Misc Paramaters
$MISC
#Should we remake?
$RMAKE
#Config Params Used
$CONFIG
#Do we have SVN
$SVN
#Enable GNU SSL
$SSL
#SSL DIR
$SSLDIR
#Small Network support
$SMALLNET
EOF

	close(FILEWRITE);
}

###########################################
#                 Quite Config
###########################################

sub quiet_config() {

    check_cache();
    load_cache();

    print "Running non-interactive config.\n";
	#check loaded values
    if (!$EMODES) { $EMODES = "Yes"; }
    if (!$HOST) { $HOST = `hostname`; }
    if (!$DMODE) { $DMODE = "No"; }
    if ((!$MISC) || ($i !~ /--.+/)) { $MISC = "None";  }
    if (!$DIR) { $DIR = $ENV{'HOME'}."/omega/"; }
    if (!$RMAKE) { $RMAKE = "Yes"; }
    if (!$ZLIB) { $RMAKE = "No"; }
    $CONFIG = "--prefix=".$DIR;

    if (lc($DMODE) eq "yes") { $CONFIG = $CONFIG." --enable-warnings"; }
    if (lc($EMODES) eq "no") { $CONFIG = $CONFIG." --disable-chmode-expanded"; }
    if (lc($IODEBUG) eq "yes") { $CONFIG = $CONFIG." --enable-iodebug"; } 
    if (lc($ZLIB) eq "no") { $CONFIG = $CONFIG." --disable-zlib"; } 
    
    if (lc($MISC) =~ /--.+/) { $CONFIG = $CONFIG." ".$MISC; }
    $INVALID = 1;	
    
	print "config: using ".$CONFIG."\n";

    system("./configure ".$CONFIG);

    if (lc($RMAKE) eq "yes") {
        system("make clean build install");
    }
    exit;
}

############################################
#               Welcome Banner
############################################

sub banner {

    print "  		DirectIRCd  \n";
    print "        Configuration/SetupUtility\n";
    print "  \r\n";
    print "Please read the README file before continuing\n";
    print "the setup process\n";
    if (!($CONFIG_DATE eq "Unknown")) {
      print " \r\n";
      print "Cache generated on: [\033[1;33m".$CONFIG_DATE."\033[0m] \r\n";
    }
    print "  \r\n";

}

############################################
#          Main Config Routines
############################################
sub config {


    banner();

    #load_cache();
	

    print "Install directory\n";
    print "[\033[1;32m".$DIR."\033[0m]: ";

    #first up grab the directory information :)
    $i = (<>);
    chomp($i);

    #check to see if it doesnt eq yes
    #if it does use the same directory :)

    if (($i) && (lc($i) !~ /^y.+/)) {
        $DIR = $i;
    }

    #print "DIR: " . $DIR . " - i: " . $i . "\n";

    $CONFIG = "--prefix=".$DIR;
	
    printf("\r\n");

    print "Hostname\n";
    print "[\033[1;32m".$HOST."\033[0m]: ";

    #grab the host information :)
    $i = (<>);
    chomp($i);

    if (($i) && (lc($i) !~ /y.+/)) {
        $HOST = $i;
    }


    print "\r\n";
    
    #Extended Modes
    print "Enable small network support\n";
    print "[\033[1;32m".$SMALLNET."\033[0m]: ";

    $i = (<>);
    chomp($i);

    if ((lc($i) =~ /y.+/) || ((!$i) && (lc($SMALLNET) eq "yes")))   {
        $CONFIG = $CONFIG."--enable-small-net";
		$SMALLNET = "yes";
	} else {
		$SMALLNET = "No";
    }
	
	    print " \r\n";

    #Extended Modes
    print "Enable extended mode prefixes (qaohv)\n";
    print "[\033[1;32m".$EMODES."\033[0m]: ";

    $i = (<>);
    chomp($i);

    if ((lc($i) =~ /n.+/) || ((!$i) && (lc($EMODES) eq "no")))   {
        $CONFIG = $CONFIG."--disable-chmode-expanded";
		$EMODES = "No";
	} else {
		$EMODES = "Yes";
	}
	
    #more fresh lines
    print " \r\n";
   
       #Extended Modes
    print "Enable ZLib support (Recommended)\n";
    print "[\033[1;32m".$ZLIB."\033[0m]: ";

    $i = (<>);
    chomp($i);

    if ((lc($i) =~ /n.+/) || ((!$i) && (lc($ZLIB) eq "no")))   {
        $CONFIG = $CONFIG."--disable-zlib";
		$ZLIB = "No";
	} else {
		$ZLIB = "Yes";
	}
	
	print "\r\n";
    #SSL Stats
    print "Enable SSL (Optional)\n";
    print "[\033[1;32m".$SSL."\033[0m]: ";

    $i = (<>);
    chomp($i);
  
    #--enable-openssl=DIR    Enable OpenSSL support (DIR optional).
    #--disable-openssl       Disable OpenSSL support.

    if ((lc($i) =~ /n.+/) || ((!$i) && (lc($SSL) eq "no")))   {
	        $CONFIG = $CONFIG." --disable-openssl";
		$SSL = "No";
    } else {
	    $SSL = "Yes";
	    print " \r\n";    
	    print " ,-----------------------------------\r\n";
	    print " |           SSL Options          \r\n";
	    print " | \r\n";
	    print " | SSL Directory\n";
	    print " | [\033[1;32m".$SSLDIR."\033[0m]: ";
	    $i = (<>);
	    chomp($i);
	    if ($i) {
		$SSLDIR = $i;
	    }
	    $CONFIG = $CONFIG." --enable-openssl=".$SSLDIR;
	    print " | \r\n";
	    print " '-----------------------------------\r\n";
    }

    #more fresh lines
    print " \r\n";
    print "Enable debugging options (Not recommended)\n";
    print "[\033[1;32m".$DMODE."\033[0m]: ";

    $i = (<>);
    chomp($i);

	if ((lc($i) =~ /y/) || ((!$i) && (lc($DMODE) eq "yes"))) {
		$DMODE = "Yes";

        print "\r\n";

        print " ,-----------------------------------\r\n";
        print " |            Debug Options          \r\n";
        print " | \r\n";

	##
	#IO Debugging
        ##
        print " | Enable IO Debugging\n";
        print " | [\033[1;32m".$IODEBUG."\033[0m]: ";

        $i = (<>);
        chomp($i);

        if ((lc($i) =~ /y/)  || ((!$i) && (lc($IODEBUG) eq "yes"))) {
               $CONFIG = $CONFIG." --enable-iodebug";
               $IODEBUG = "Yes";
        }
        
      	##
      	# Profiling
      	##  
        print " | Enable Profiling\n";
        print " | [\033[1;32m".$PROFILE."\033[0m]: ";

        $i = (<>);
        chomp($i);
		
	if ((lc($i) =~ /^no/) || (lc($i) =~ /^n/)) {
			$PROFILE = "No";
	}		
        elsif ((lc($i) =~ /^yes/) || (lc($i) =~ /^y/)) {
            $CONFIG =  $CONFIG." --enable-profile";
            $PROFILE = "Yes";
        } else {
			$PROFILE = "No";
		}
		
        print " | \r\n";
        print " '-----------------------------------\r\n";

    } else {
    	$PROFILE = "No";
    	$IODEBUG = "No";
    }


    printf "\r\n";
    #MISC
    print "Miscellaneous configure paramaters\n";
    print "[\033[1;32m".$MISC."\033[0m]: ";

    $i = (<>);
    chomp($i);
        if (($MISC =~ /no/) || ((!$i) || (lc($i) eq "none"))) {
                $MISC = "None";
        } else {
            if ($i =~ /--.+/) {
                $CONFIG = $i." ".$CONFIG;
            }

            if ($i !~ /--.+/) {
                print "Invalid parameter skipping\n";
                $MISC = "None";
            }
    }

    print "\r\n";
    print "Run make after? This includes installing the application (Recommended)\n";
    #should we run make?
    print "[\033[1;32m".$RMAKE."\033[0m]: ";

    $i = (<>);
    chomp($i);

    if ((lc($i) =~ /^no/) || (lc($i) =~ /^n/)) {
            $RMAKE = "No";
	} elsif ((lc($i) =~ /^yes/) || (lc($i) =~ /^y/)) {
			$RMAKE = "Yes";
    } else {
			$RMAKE = $RMAKE;
	}
    print "\n\nConfiguring with: ".$CONFIG."\n\n";
    system("./configure ".$CONFIG);

    if (lc($RMAKE) eq "yes") {
        system("make clean build install");
    }
    return;

}

###########################################################
# Non esential functions - these are just features
# to make the Config utility more usefull
###########################################################


sub svnup() {
		if (lc($SVN) eq "unknown") {	
			print "Checking for SVN [";
			$svn_file = `svnversion`;		
			if (lc($svn_file) eq "exported") { 
				print "\033[1;31mFailed\033[0m]\n";
				$SVN = "No";		
			} else {
				print "\033[1;32mDone\033[0m] \n";
				$SVN = "Yes";
    			} 
    			write_cache();
		}
		if (lc($SVN) eq "yes") { 
			print "\033[1;32mUpdating local copy\033[0m \n";
    			system("svn up");
    	        	if ($INVALID != 0) {
				config();
			} else {
				quiet_config();
			}	
		} else { 
		   print "You are currently not running an SVN copy of Omega.\n";
		}
		exit;
}


sub version() {
    print "Version $VERSION\n";
    exit;
}

sub usage() {

print STDERR << "HELP";

              Omega Security Services
               Configuration Utility
              (C) 2008-2011 Omega Dev Team

     ./Config useage:
     -h        : this (help) message
     -s        : updates current svn copy
     -v        : config tool current version
     -q        : Run config non interactive
     -m	       : Run "make clean build install" only	

HELP
      exit;
}

sub rmake() {
	exec("make clean build install");
}


##############################################################
#                         sub Init()
#  This is called prior to anything else, it grabs the options
#  and initializes things :)
##############################################################

sub Init() {
	use Getopt::Std;
	my $opt_string = 'shvqm';
	getopts( "$opt_string", \%opt ) or usage();
	svnup() if $opt{s};
	usage() if $opt{h};
  version() if $opt{v};
  quiet_config() if $opt{q};
  rmake() if $opt{m};


}


#############################################################
#                  Actual Script Run Tree                   #
#############################################################

check_cache();
load_cache();
Init();
config();
write_cache();



